void CheckCapacity(Stack* ps)
{
	assert(ps);
	if (ps->_size == ps->_capacity)
	{
		//开辟新空间
		int newCapacity = ps->_capacity * 2;
		SDataType* pNew = (SDataType*)malloc(sizeof(SDataType)*newCapacity);
		if (pNew == NULL)
		{
			assert(0);
			return;
		}

		//拷贝旧元素
		for (int i = 0; i < ps->_size; ++i)
		{
			pNew[i] = ps->_array[i];
		}

		//释放空间
		free(ps->_array);
		ps->_array = NULL;

		ps->_array = pNew;
		ps->_capacity = newCapacity;

	}
}
void StackInit(Stack* ps)
{
	assert(ps);
	ps->_array = (SDataType*)malloc(sizeof(SDataType)* 3);
	if (ps->_array == NULL)
		return;
	ps->_capacity = 3;
	ps->_size = 0;

}
void StackPush(Stack* ps, SDataType data)
{
	//检测是否有足够空间
	CheckCapacity(ps);

	ps->_array[ps->_size++] = data;

}
void StackPop(Stack* ps)
{
	assert(ps);
	if (StackEmpty(ps))
		return;
	ps->_size -= 1;
}
SDataType StackTop(Stack* ps)
{
	assert(ps);
	return ps->_array[ps->_size - 1];
}
int StackSize(Stack* ps)
{
	assert(ps);
	return ps->_size;
}
bool StackEmpty(Stack* ps)
{
	return 0 == ps->_size;
}
void StackDestroty(Stack* ps)
{
	assert(ps);
	if (ps->_array)
	{
		free(ps->_array);
		ps->_array = NULL;
		ps->_capacity = 0;
		ps->_size = 0;
	}
}